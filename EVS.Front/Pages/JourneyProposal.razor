@page "/journeyproposal"
@using EVS.Core.Models
@using EVS.Front.Services
@using MudBlazor
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using FluentValidation
@using Severity = MudBlazor.Severity
@inject ISnackbar Snackbar
@inject IRideService rideService;
@inject NavigationManager NavigationManager



<MudGrid Spacing="0">
	<MudItem xs="5">
		<MudText Typo="Typo.h2" Color="Color.Primary" Style="margin:2em 0 0 3em;">Proposez votre Trajet</MudText>

	</MudItem>

		<MudItem xs="7" Style="max-width:100%">
		<MudPaper Style="padding: 1em; margin-top:3em">

			<MudForm @ref="form" @bind-IsValid="@success" Model="ride" @bind-Errors="@errors">

				<MudText Style=" margin:2em 0 1em 0;" Typo="Typo.h5" class="form-label" Color="Color.Primary">D'où partez vous?</MudText>

				<MudGooglePlacesAutocomplete T="string"
											 Placeholder="Ville de départ"
											 OnPlaceChanged="StartChanged"
											 Adornment="Adornment.Start"
											 AdornmentIcon="@Icons.Material.Filled.Start"
											 ApiKey="AIzaSyDfY1D6Gea4uKJ51ppPxwQsyxcjj3An98E" 
											 @bind-Value="ride.StartCity" />

				<MudText Style=" margin:2em 0 1em 0;" Typo="Typo.h5" class="form-label" Color="Color.Primary">Où allez vous?</MudText>

				<MudGooglePlacesAutocomplete T="string"
											 Placeholder="Ville d'arrivée"
											 OnPlaceChanged="EndChanged"
											 Adornment="Adornment.Start"
											 AdornmentIcon="@Icons.Material.Filled.KeyboardTab"
											 ApiKey="AIzaSyDfY1D6Gea4uKJ51ppPxwQsyxcjj3An98E"
											 @bind-Value="ride.EndCity" />

				<MudText Style=" margin:2em 0 1em 0;" Typo="Typo.h5" class="form-label" Color="Color.Primary">Quand souhaitez vous prendre la route?</MudText>
				<MudDatePicker @bind-Date="criteriaDeparture" MinDate="DateTime.Today" Adornment="Adornment.Start" AdornmentColor="Color.Primary" />
				<MudText Style="margin:2em 0 1em 0;" Typo="Typo.h5" class="form-label" Color="Color.Primary">Combien de passagers souaitez-vous emmener ?</MudText>
				<MudGrid Spacing="0" class="counter">

					<MudItem xs="9">

						<MudSlider TickMarks="true" Color="Color.Secondary" @bind-Value="@ride.Seats" TickMarkLabels="@labels" Step="1" Max="5" Min="1" />
					</MudItem>
					<MudItem xs="3">
						<MudText Typo="Typo.h4" Color="Color.Secondary" Style="margin-left:1em">@ride.Seats</MudText>
					</MudItem>
				</MudGrid>

				<MudText Style=" margin:2em 0 1em 0;" Typo="Typo.h5" class="form-label" Color="Color.Primary">Quel est le prix de chaque place ?</MudText>

				<MudGrid Spacing="0" class="counter">

					<MudItem xs="9">
						<MudSlider TickMarks="true" Color="Color.Secondary" @bind-Value="@ride.Price" Step="1" Max="99" Min="1" />
					</MudItem>
					<MudItem xs="3">
						<MudText Typo="Typo.h4" Color="Color.Secondary" Style="margin-left:1em">@ride.Price €</MudText>
					</MudItem>

				</MudGrid>

				<MudCardActions>
					<MudButton Variant="Variant.Filled" Style="margin:2em 0;" Color="Color.Primary" Class="ml-auto" OnClick="ActionContext">Creer votre trajet</MudButton>
				</MudCardActions>


			</MudForm>
		</MudPaper>
	</MudItem>

</MudGrid>

<MudPopover Open="@_isOpen" Fixed="true" Class="px-8 pt-8" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
	<div class="d-flex flex-column">
		<MudText>
	 Votre trajet a bien été créé !
		</MudText>
		<MudButton Href="/JourneyLists/" Variant="Variant.Filled" Class="ml-auto mr-n3 mb-1 .mud-elevation-24" Color="Color.Primary">Continer sur le site</MudButton>
	</div>
</MudPopover>



@code {

	private DateTime? criteriaDeparture = DateTime.Today.AddDays(1);

	[Parameter]
	public Ride ride { get; set; } = new()
	{
			UserId = Guid.Parse("5f429d6d-238a-42ed-865c-7d9b5974e2e2"),

			Departure = DateTime.Today.AddDays(5),
			Seats = 2,
			Price = 50
	};

	private GooglePlace criteraStart = null;
	private GooglePlace criteraEnd = null;


	private void StartChanged(GooglePlace place)
	{
		criteraStart = place;
	}

	private void EndChanged(GooglePlace place)
	{
		criteraEnd = place;
	}

	bool success;
	string[] errors = { };


	public void ActionContext()
	{
		ToggleOpen();
		Confirm();
	}

	public void ToggleOpen()
	{
		form.Validate();
		if (success)
		{
			if (_isOpen)
				_isOpen = false;
			else
				_isOpen = true;
		}
	}

	private async void Confirm()
	{
		form.Validate();
		if (success)
		{
			ride.StartCity = criteraStart.AddressComponents[0].ShortName;
			ride.StartLatitude = criteraStart.Geometry.Location.Lat;
			ride.StartLongitude = criteraStart.Geometry.Location.Lng;

			ride.EndCity = criteraEnd.AddressComponents[0].ShortName;
			ride.EndLatitude = criteraEnd.Geometry.Location.Lat;
			ride.EndLongitude = criteraEnd.Geometry.Location.Lng;

			ride.Departure = criteriaDeparture ?? DateTime.Today.AddDays(1);

			Ride? createdRide = await rideService.Create(ride);
			// Guid newId = createdRide.Id;
			// NavigationManager.NavigateTo("/JourneyLists/");
		}
	}



	int NumberPrice = 15;
	int NumberPassager;
	string[] labels = new string[] { "1", "2", "3", "4", "5" };

	MudTextField<string> pwField1;
	MudForm form;
	DateTime? date = DateTime.Today;

	private async Task Submit()
	{
		await form.Validate();

		if (form.IsValid)
		{
			Snackbar.Add("Submited!");
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("initAutocomplete");
		}
	}

	private int counterValueVoyager = 0;
	private int counterValueEuro = 0;

	private void DecrementCounterVoyager()
	{
		if (counterValueVoyager > 0)
		{
			counterValueVoyager--;
		}
	}

	private void IncrementCounterVoyager()
	{
		counterValueVoyager++;
	}

	private void DecrementCounterEuro()
	{
		if (counterValueEuro > 0)
		{
			counterValueEuro--;
		}
	}

	private void IncrementCounterEuro()
	{
		counterValueEuro++;
	}


	public bool _isOpen;

	
}
