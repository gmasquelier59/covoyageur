@page "/profilcreation"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using EVS.Core.Models
@using EVS.Front.Services
@using MudBlazor
@using FluentValidation
@using Severity = MudBlazor.Severity
@inject ISnackbar Snackbar
@inject IUserService userService;
@inherits LayoutComponentBase



<MudGrid Spacing="0">
	<MudItem xs="5">
		<MudText Typo="Typo.h2" Color="Color.Primary" Style="margin:2em 0 0 3em;">Creation de votre compte En voiture Simone !</MudText>
	</MudItem>

	<MudItem xs="7">
		<MudPaper Style="padding: 1em; margin-top:3em">

			<MudForm @ref="form" @bind-IsValid="@success" Model="user" @bind-Errors="@errors">
				<MudTextField @bind-Value="user.LastName" T="string" Label="Nom" Required="true" RequiredError="Votre nom nous est nécessaire!" />
				<MudTextField @bind-Value="user.FirstName" T="string" Label="Prenom" Required="true" RequiredError="Votre prenom nous est nécessaire!" />
				<MudTextField @bind-Value="user.PhoneNumber" T="string" Label="Numéro de Téléphone" Required="true" RequiredError="Votre numéro nous est nécessaire!" />
				<MudDatePicker Label="Date" For="@(() => user.Birthday)" Required="true" RequiredError="Nous avons besoin de votre date de naissance!" />
				<MudTextField @bind-Value="user.Pseudo" T="string" Label="Pseudonyme" Required="true" RequiredError="Un pseudo nous est nécessaire!" />
				<MudTextField @bind-Value="user.Email" T="string" Label="Email" Required="true" RequiredError="Votre email nous est nécessaire!"
							  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
				<MudTextField @bind-Value="user.CarDescription" T="string" Label="Description de votre voiture" Required="false" />
				<MudTextField @bind-Value="user.Password" T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
							  InputType="InputType.Password"
							  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
							  RequiredError="Password is required!" />
				<MudTextField T="string"
							  Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
							  Validation="@(new Func<string, string>(PasswordMatch))" />
				<MudTextField @bind-Value="user.Photo" T="string" Label="photo" Required="true" RequiredError="Une photo nous est nécessaire!" />
				@* 				<a style="margin:2em">
				<MudFileUpload Style="margin:1em" T="IBrowserFile" For="@(() => model.File)" @bind-Files="model.File" OnFilesChanged="UploadFiles" Accept=".png, .jpg">
				<ButtonTemplate>
				<MudButton HtmlTag="label"
				Variant="Variant.Filled"
				Color="Color.Primary"
				StartIcon="@Icons.Material.Filled.CloudUpload"
				for="@context.Id">
				Enregistrer votre photo
				</MudButton>
				<MudButton OnClick="@context.Actions.ClearAsync"
				Variant="Variant.Filled"
				Color="Color.Primary"
				StartIcon="@Icons.Material.Filled.Clear">
				Supprimer votre photo
				</MudButton>
				</ButtonTemplate>
				</MudFileUpload>
				</a>
				*@
				<a>
					<MudSwitch T="bool" @bind-Value="user.AcceptSmallTalk" Color="Color.Primary" UnCheckedColor="Color.Secondary" >
						 <MudText>
							@((user.AcceptSmallTalk == true) ? "J'aime discuter!" : "Je suis très discret" )
						</MudText>						
					</MudSwitch>
					<MudSwitch T="bool" @bind-Value="user.AcceptMusic" Color="Color.Primary" UnCheckedColor="Color.Secondary" >
						<MudText>
							@((user.AcceptMusic == true) ? "J'aime écouter de la musique!" :"Je préfère le silence." )
						</MudText>
					</MudSwitch>
					<MudSwitch T="bool" @bind-Value="user.AcceptFood" Color="Color.Primary" UnCheckedColor="Color.Secondary">
						<MudText>
							@((user.AcceptFood == true) ? "J'aime manger en voyageant!" : "Je préfère manger à une table.")
						</MudText>	
					</MudSwitch>
					<MudSwitch T="bool" @bind-Value="user.AcceptPet" Color="Color.Primary" UnCheckedColor="Color.Secondary" >
						<MudText>
							@((user.AcceptPet == true) ? "J'aime beaucoup les animaux!" : "Je préfère voyager sans animaux.")
						</MudText>
					</MudSwitch>
					<MudSwitch T="bool" @bind-Value="user.AcceptSmoker" Color="Color.Primary" UnCheckedColor="Color.Secondary" >
						<MudText>
							@((user.AcceptSmoker == true) ? "Avec moi tu peux fumer sans problème!" : "Je n'aime pas la fumée!")
						</MudText>

					</MudSwitch>
				</a>

				<a class="d-flex align-center justify-space-between" style="margin:2em">
					<MudButton Variant="Variant.Text" OnClick="@ToggleOpen">J'accepte les conditons d'utilisation de EnVoitureSimone!</MudButton><MudCheckBox T="bool" Required="true" Style="margin:1em" />

					<MudPopover Open="@_isOpen" Fixed="true" Class="px-8 pt-8">
						<div class="d-flex flex-column">
							<MudText>
								Les utilisateurs doivent être âgés d'au moins 18 ans et posséder un permis de conduire valide. Ils doivent également accepter de partager les frais de voyage de manière équitable. Les conducteurs doivent être assurés et enregistrés auprès des autorités compétentes. Les passagers doivent respecter les règles de sécurité et de courtoisie. Le site n'est pas responsable des accidents ou des dommages. Les utilisateurs doivent respecter les lois locales et les droits d'auteur.
							</MudText>
							<MudButton OnClick="@ToggleOpen" Variant="Variant.Filled" Class="ml-auto mr-n3 mb-1" Color="Color.Primary">J'ai lu!</MudButton>
						</div>
					</MudPopover>
				</a>
			</MudForm>
			<MudCardActions>
				<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="Confirm">Creer votre compte</MudButton>
			</MudCardActions>


		</MudPaper>
	</MudItem>
</MudGrid>





@code {


	bool success;
	string[] errors = { };
	MudTextField<string> pwField1;
	MudForm form;

	[Parameter]
	public User user { get; set; } = new()
		{
			AcceptFood = true,
			AcceptMusic = true,
			AcceptPet = true,
			AcceptSmallTalk = true,
			AcceptSmoker = true,
			Birthday = DateTime.Now,
			CarDescription = "205 sacre numero",
			Email = "jo@jo.jo",
			FirstName = "jo",
			LastName = "jo",
			Password = "Azerty1234?",
			PhoneNumber = "0606060606",
			Pseudo = "jo",
			Photo = "jo.png",

		};

	private void Confirm()
	{
		form.Validate();
		if (success)
		{
			var createdUser = userService.Create(user);
		}
	}


	private IEnumerable<string> PasswordStrength(string pw)
	{
		if (string.IsNullOrWhiteSpace(pw))
		{
			yield return "Password is required!";
			yield break;
		}
		if (pw.Length < 8)
			yield return "Password must be at least of length 8";
		if (!Regex.IsMatch(pw, @"[A-Z]"))
			yield return "Password must contain at least one capital letter";
		if (!Regex.IsMatch(pw, @"[a-z]"))
			yield return "Password must contain at least one lowercase letter";
		if (!Regex.IsMatch(pw, @"[0-9]"))
			yield return "Password must contain at least one digit";
	}

	private string PasswordMatch(string arg)
	{
		if (pwField1.Value != arg)
			return "Passwords don't match";
		return null;
	}

	public bool _isOpen;

	public void ToggleOpen()
	{
		if (_isOpen)
			_isOpen = false;
		else
			_isOpen = true;
	}



	private FileModel model = new();
	private FileModelFluentValidator ValidationRules = new();
	private bool SuppressOnChangeWhenInvalid;

	private void UploadFiles(InputFileChangeEventArgs e)
	{

		Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
		Snackbar.Add($"This file has the extension {model.File.Name.Split(".").Last()}", Severity.Info);

		//TODO upload the files to the server
	}

	private async Task Submit()
	{
		await form.Validate();

		if (form.IsValid)
		{
			Snackbar.Add("Submited!");
		}
	}


	public class FileModel
	{
		public string Name { get; set; }
		public IBrowserFile File { get; set; }
	}


	public class FileModelFluentValidator : AbstractValidator<FileModel>
	{
		public FileModelFluentValidator()
		{
			RuleFor(x => x.Name)
				.NotEmpty()
				.Length(1, 100);
			RuleFor(x => x.File)
			.NotEmpty();
			When(x => x.File != null, () =>
			{
				RuleFor(x => x.File.Size).LessThanOrEqualTo(10485760).WithMessage("La taille de votre fichier ne peut être suppérieur à 10 MB");
			});
		}

		public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
		{
			var result = await ValidateAsync(ValidationContext<FileModel>.CreateWithOptions((FileModel)model, x => x.IncludeProperties(propertyName)));
			if (result.IsValid)
				return Array.Empty<string>();
			return result.Errors.Select(e => e.ErrorMessage);
		};
	}
}