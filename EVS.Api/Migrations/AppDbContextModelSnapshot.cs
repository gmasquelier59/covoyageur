// <auto-generated />
using System;
using EVS.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EVS.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EVS.Core.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("comments");

                    b.Property<int>("Note")
                        .HasColumnType("int")
                        .HasColumnName("note");

                    b.Property<Guid>("RideId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ride_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("feedback");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d50af06-45c9-4f7f-9594-dfad606482b5"),
                            Comments = "J'ai pris un EVS à cause de la grève sncf. Au bout de dix minutes de discussion, il y a un passager qui dit \"Eh ca vous dis pas un covoiturage où tout le monde ferme sa gueule ?\"\r\nGrand silence depuis, plus personne ose parler.",
                            Note = 4,
                            RideId = new Guid("4061b41d-8da6-4eb0-949c-aa249e98f764"),
                            UserId = new Guid("21d95147-04a8-4e9c-8cb7-d52f3247960c")
                        },
                        new
                        {
                            Id = new Guid("6eaf1501-c41b-47ea-8e74-86fe3cd4bb3b"),
                            Comments = "En Voiture Simone qui m'envoie une notif pour me dire que je suis éligible à la prime de l'Etat de 100€ pour encourager le convoiturage mdrrr ok il me manque juste le permis mais sinon ok je suis éligible 😭",
                            Note = 5,
                            RideId = new Guid("4061b41d-8da6-4eb0-949c-aa249e98f764"),
                            UserId = new Guid("915e388f-1196-449a-890e-955058631f11")
                        },
                        new
                        {
                            Id = new Guid("0421c69b-74df-41e5-b88f-d3f1f63cef52"),
                            Comments = "suis dans mon EVS il a fermé les fenetres j’ose pas dire que j’ai des cheveux coincés dedans je peux pas bouger omg",
                            Note = 3,
                            RideId = new Guid("4061b41d-8da6-4eb0-949c-aa249e98f764"),
                            UserId = new Guid("14e5576b-bea6-47a7-963a-a4bd357815be")
                        });
                });

            modelBuilder.Entity("EVS.Core.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("reservation_date");

                    b.Property<Guid>("RideId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ride_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("reservation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63892a8f-4966-481f-b03d-41a22be36496"),
                            ReservationDate = new DateTime(2024, 3, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            RideId = new Guid("0600743a-5d3f-4939-a1f3-e65bb26b577e"),
                            Status = 1,
                            UserId = new Guid("14e5576b-bea6-47a7-963a-a4bd357815be")
                        },
                        new
                        {
                            Id = new Guid("51302a35-9573-4463-9dac-ba23a2817246"),
                            ReservationDate = new DateTime(2024, 3, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            RideId = new Guid("9eaaa699-3336-4ab5-aa5d-ab373f929c07"),
                            Status = 2,
                            UserId = new Guid("5f429d6d-238a-42ed-865c-7d9b5974e2e2")
                        },
                        new
                        {
                            Id = new Guid("b099e54d-106b-4f25-803b-328c05e7d25f"),
                            ReservationDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            RideId = new Guid("0600743a-5d3f-4939-a1f3-e65bb26b577e"),
                            Status = 1,
                            UserId = new Guid("656c8201-b6d9-4ae3-b27a-a666de79c41a")
                        });
                });

            modelBuilder.Entity("EVS.Core.Models.Ride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("datetime2")
                        .HasColumnName("departure");

                    b.Property<int>("Distance")
                        .HasColumnType("int")
                        .HasColumnName("distance");

                    b.Property<string>("EndCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("end_city");

                    b.Property<double>("EndLatitude")
                        .HasColumnType("float")
                        .HasColumnName("end_latitude");

                    b.Property<double>("EndLongitude")
                        .HasColumnType("float")
                        .HasColumnName("end_longitude");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("Seats")
                        .HasColumnType("int")
                        .HasColumnName("seats");

                    b.Property<string>("StartCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("start_city");

                    b.Property<double>("StartLatitude")
                        .HasColumnType("float")
                        .HasColumnName("start_latitude");

                    b.Property<double>("StartLongitude")
                        .HasColumnType("float")
                        .HasColumnName("start_longitude");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ride");

                    b.HasData(
                        new
                        {
                            Id = new Guid("596bfa1f-ff4f-4390-b6ef-0a32450a2db1"),
                            Departure = new DateTime(2024, 3, 18, 7, 0, 0, 0, DateTimeKind.Local),
                            Distance = 204,
                            EndCity = "Paris",
                            EndLatitude = 48.858825500000002,
                            EndLongitude = 2.2646343999999998,
                            Price = 20.0,
                            Seats = 3,
                            StartCity = "Lille",
                            StartLatitude = 50.631073299999997,
                            StartLongitude = 3.0056983000000002,
                            UserId = new Guid("21d95147-04a8-4e9c-8cb7-d52f3247960c")
                        },
                        new
                        {
                            Id = new Guid("0600743a-5d3f-4939-a1f3-e65bb26b577e"),
                            Departure = new DateTime(2024, 3, 19, 11, 0, 0, 0, DateTimeKind.Local),
                            Distance = 204,
                            EndCity = "Paris",
                            EndLatitude = 48.858825500000002,
                            EndLongitude = 2.2646343999999998,
                            Price = 18.0,
                            Seats = 2,
                            StartCity = "Lille",
                            StartLatitude = 50.631073299999997,
                            StartLongitude = 3.0056983000000002,
                            UserId = new Guid("656c8201-b6d9-4ae3-b27a-a666de79c41a")
                        },
                        new
                        {
                            Id = new Guid("9eaaa699-3336-4ab5-aa5d-ab373f929c07"),
                            Departure = new DateTime(2024, 3, 23, 17, 0, 0, 0, DateTimeKind.Local),
                            Distance = 204,
                            EndCity = "Lille",
                            EndLatitude = 50.631073299999997,
                            EndLongitude = 3.0056983000000002,
                            Price = 23.0,
                            Seats = 4,
                            StartCity = "Paris",
                            StartLatitude = 48.858825500000002,
                            StartLongitude = 2.2646343999999998,
                            UserId = new Guid("915e388f-1196-449a-890e-955058631f11")
                        },
                        new
                        {
                            Id = new Guid("276df4d1-8f8a-4987-8e5e-5f04abca04a3"),
                            Departure = new DateTime(2024, 3, 30, 5, 0, 0, 0, DateTimeKind.Local),
                            Distance = 660,
                            EndCity = "Marseille",
                            EndLatitude = 43.280226999999996,
                            EndLongitude = 5.2158397000000001,
                            Price = 39.0,
                            Seats = 1,
                            StartCity = "Paris",
                            StartLatitude = 48.858825500000002,
                            StartLongitude = 2.2646343999999998,
                            UserId = new Guid("5f429d6d-238a-42ed-865c-7d9b5974e2e2")
                        },
                        new
                        {
                            Id = new Guid("4472491c-9e56-4215-a6af-64f0ea2d7359"),
                            Departure = new DateTime(2024, 3, 22, 4, 0, 0, 0, DateTimeKind.Local),
                            Distance = 435,
                            EndCity = "Bordeaux",
                            EndLatitude = 44.841225000000001,
                            EndLongitude = -0.580036,
                            Price = 46.0,
                            Seats = 3,
                            StartCity = "Lyon",
                            StartLatitude = 45.757814000000003,
                            StartLongitude = 4.8320109999999996,
                            UserId = new Guid("5f429d6d-238a-42ed-865c-7d9b5974e2e2")
                        },
                        new
                        {
                            Id = new Guid("4061b41d-8da6-4eb0-949c-aa249e98f764"),
                            Departure = new DateTime(2024, 3, 9, 8, 0, 0, 0, DateTimeKind.Local),
                            Distance = 699,
                            EndCity = "Lille",
                            EndLatitude = 50.631073299999997,
                            EndLongitude = 50.631073299999997,
                            Price = 52.0,
                            Seats = 2,
                            StartCity = "Bordeaux",
                            StartLatitude = 44.841225000000001,
                            StartLongitude = -0.580036,
                            UserId = new Guid("5f429d6d-238a-42ed-865c-7d9b5974e2e2")
                        },
                        new
                        {
                            Id = new Guid("85091d80-0d08-48c1-962e-4879f4bde263"),
                            Departure = new DateTime(2024, 3, 31, 8, 0, 0, 0, DateTimeKind.Local),
                            Distance = 646,
                            EndCity = "Bordeaux",
                            EndLatitude = 44.841225000000001,
                            EndLongitude = -0.580036,
                            Price = 45.0,
                            Seats = 5,
                            StartCity = "Marseille",
                            StartLatitude = 43.280226999999996,
                            StartLongitude = 5.2158397000000001,
                            UserId = new Guid("915e388f-1196-449a-890e-955058631f11")
                        });
                });

            modelBuilder.Entity("EVS.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("AcceptFood")
                        .HasColumnType("bit")
                        .HasColumnName("accept_food");

                    b.Property<bool>("AcceptMusic")
                        .HasColumnType("bit")
                        .HasColumnName("accept_music");

                    b.Property<bool>("AcceptPet")
                        .HasColumnType("bit")
                        .HasColumnName("accept_pet");

                    b.Property<bool>("AcceptSmallTalk")
                        .HasColumnType("bit")
                        .HasColumnName("accept_talk");

                    b.Property<bool>("AcceptSmoker")
                        .HasColumnType("bit")
                        .HasColumnName("accept_smoker");

                    b.Property<DateTime?>("Birthday")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("birthday");

                    b.Property<string>("CarDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("car_description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("is_admin");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("photo");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("pseudo");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Pseudo")
                        .IsUnique();

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("224779c4-2d81-4c46-b450-0b0d66368e28"),
                            AcceptFood = false,
                            AcceptMusic = false,
                            AcceptPet = false,
                            AcceptSmallTalk = false,
                            AcceptSmoker = false,
                            Birthday = new DateTime(2024, 3, 13, 14, 7, 20, 5, DateTimeKind.Local).AddTicks(8205),
                            CarDescription = "",
                            Email = "admin@envoituresimone.com",
                            FirstName = "Admin",
                            IsAdmin = true,
                            LastName = "Admin",
                            Password = "admin",
                            PhoneNumber = "0102030405",
                            Photo = "https://this-person-does-not-exist.com/img/avatar-gen485cbb48758f0bbe06ed361e18f34d9c.jpg",
                            Pseudo = "admin"
                        },
                        new
                        {
                            Id = new Guid("21d95147-04a8-4e9c-8cb7-d52f3247960c"),
                            AcceptFood = true,
                            AcceptMusic = true,
                            AcceptPet = false,
                            AcceptSmallTalk = false,
                            AcceptSmoker = false,
                            Birthday = new DateTime(1998, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "Daewoo",
                            Email = "angedu59@gmail.com",
                            FirstName = "Ange",
                            IsAdmin = false,
                            LastName = "Lefebvre",
                            Password = "df45dfh4",
                            PhoneNumber = "0337862430",
                            Photo = "https://this-person-does-not-exist.com/img/avatar-gen1175da31458c1a38f5c53205c1d40c49.jpg",
                            Pseudo = "angedu59"
                        },
                        new
                        {
                            Id = new Guid("915e388f-1196-449a-890e-955058631f11"),
                            AcceptFood = false,
                            AcceptMusic = true,
                            AcceptPet = false,
                            AcceptSmallTalk = true,
                            AcceptSmoker = true,
                            Birthday = new DateTime(1974, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "Lexus",
                            Email = "nath@gmail.com",
                            FirstName = "Nathanaël",
                            IsAdmin = false,
                            LastName = "Leroy",
                            Password = "456df456fg",
                            PhoneNumber = "0322458382",
                            Photo = "https://this-person-does-not-exist.com/img/avatar-genc4f3be92e510666c0f16aeee2435ed90.jpg",
                            Pseudo = "n@thleroy"
                        },
                        new
                        {
                            Id = new Guid("656c8201-b6d9-4ae3-b27a-a666de79c41a"),
                            AcceptFood = false,
                            AcceptMusic = true,
                            AcceptPet = true,
                            AcceptSmallTalk = false,
                            AcceptSmoker = false,
                            Birthday = new DateTime(1988, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "Jeep",
                            Email = "pokedex@gmail.com",
                            FirstName = "Agathe",
                            IsAdmin = false,
                            LastName = "Klein",
                            Password = "fg456gf546",
                            PhoneNumber = "0903434966",
                            Photo = "https://this-person-does-not-exist.com/img/avatar-gen7b7dfa2a253e45ffa4925acc349ffcdc.jpg",
                            Pseudo = "pokemonlover"
                        },
                        new
                        {
                            Id = new Guid("14e5576b-bea6-47a7-963a-a4bd357815be"),
                            AcceptFood = true,
                            AcceptMusic = true,
                            AcceptPet = false,
                            AcceptSmallTalk = false,
                            AcceptSmoker = false,
                            Birthday = new DateTime(1984, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "Austin",
                            Email = "chloechloe@gmail.com",
                            FirstName = "Chloé",
                            IsAdmin = false,
                            LastName = "Laurent",
                            Password = "456dffg456",
                            PhoneNumber = "0162842195",
                            Photo = "https://this-person-does-not-exist.com/img/avatar-gen1131946bc643d6ef1643496115dade90.jpg",
                            Pseudo = "chloechloe"
                        },
                        new
                        {
                            Id = new Guid("5f429d6d-238a-42ed-865c-7d9b5974e2e2"),
                            AcceptFood = true,
                            AcceptMusic = false,
                            AcceptPet = false,
                            AcceptSmallTalk = false,
                            AcceptSmoker = false,
                            Birthday = new DateTime(1997, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "BMW",
                            Email = "malolesbains@plage.org",
                            FirstName = "Malo",
                            IsAdmin = false,
                            LastName = "Guérin",
                            Password = "zer234efz42",
                            PhoneNumber = "0494223557",
                            Photo = "https://this-person-does-not-exist.com/img/avatar-gen376a50c7287a78e549d58d13a864d15f.jpg",
                            Pseudo = "malolesbains"
                        });
                });

            modelBuilder.Entity("EVS.Core.Models.Feedback", b =>
                {
                    b.HasOne("EVS.Core.Models.Ride", "Ride")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVS.Core.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ride");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVS.Core.Models.Reservation", b =>
                {
                    b.HasOne("EVS.Core.Models.Ride", "Ride")
                        .WithMany("Reservations")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVS.Core.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ride");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVS.Core.Models.Ride", b =>
                {
                    b.HasOne("EVS.Core.Models.User", "User")
                        .WithMany("Rides")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVS.Core.Models.Ride", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("EVS.Core.Models.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Reservations");

                    b.Navigation("Rides");
                });
#pragma warning restore 612, 618
        }
    }
}
