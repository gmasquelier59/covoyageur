// <auto-generated />
using System;
using EVS.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EVS.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240312101855_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EVS.Core.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("comments");

                    b.Property<int>("Note")
                        .HasColumnType("int")
                        .HasColumnName("note");

                    b.Property<Guid>("RideId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ride_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("feedback");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc6f01f8-10f2-483d-8c7d-e0766a11ab06"),
                            Comments = "J'ai pris un EVS à cause de la grève sncf. Au bout de dix minutes de discussion, il y a un passager qui dit \"Eh ca vous dis pas un covoiturage où tout le monde ferme sa gueule ?\"\r\nGrand silence depuis, plus personne ose parler.",
                            Note = 4,
                            RideId = new Guid("716016f8-a49d-483e-a219-1c530091ecf8"),
                            UserId = new Guid("9ce2d194-ea60-4af0-a7dc-4498d6b049ef")
                        },
                        new
                        {
                            Id = new Guid("21830793-ab65-4f07-a76c-b0980ef81c0a"),
                            Comments = "En Voiture Simone qui m'envoie une notif pour me dire que je suis éligible à la prime de l'Etat de 100€ pour encourager le convoiturage mdrrr ok il me manque juste le permis mais sinon ok je suis éligible 😭",
                            Note = 5,
                            RideId = new Guid("716016f8-a49d-483e-a219-1c530091ecf8"),
                            UserId = new Guid("80bcd0ab-ed65-4e39-8c51-b5a16b0cda77")
                        },
                        new
                        {
                            Id = new Guid("af3bd3d6-9216-4989-b22f-0941d3452045"),
                            Comments = "suis dans mon EVS il a fermé les fenetres j’ose pas dire que j’ai des cheveux coincés dedans je peux pas bouger omg",
                            Note = 3,
                            RideId = new Guid("716016f8-a49d-483e-a219-1c530091ecf8"),
                            UserId = new Guid("bc98b4a9-afa0-49c1-9fc6-8457af77758a")
                        });
                });

            modelBuilder.Entity("EVS.Core.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("reservation_date");

                    b.Property<Guid>("RideId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ride_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("reservation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8cebb3e5-88ac-46d2-95e0-c4aeeebc26c9"),
                            ReservationDate = new DateTime(2024, 3, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            RideId = new Guid("8d4a638d-13b6-4cc3-ab3c-58af25cd208f"),
                            Status = 1,
                            UserId = new Guid("bc98b4a9-afa0-49c1-9fc6-8457af77758a")
                        },
                        new
                        {
                            Id = new Guid("27c76aec-4ea1-4f87-89fa-25590edd9b0f"),
                            ReservationDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            RideId = new Guid("be408512-a07c-4c8e-818e-78b2e6ae4da4"),
                            Status = 2,
                            UserId = new Guid("c9469a26-87f5-4019-9d8f-9fa7de4e8050")
                        },
                        new
                        {
                            Id = new Guid("aa6e4a82-e796-4361-9416-e2d92cc07c79"),
                            ReservationDate = new DateTime(2024, 3, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            RideId = new Guid("8d4a638d-13b6-4cc3-ab3c-58af25cd208f"),
                            Status = 1,
                            UserId = new Guid("588adbff-9da6-4230-8eaf-ffea4582a67e")
                        });
                });

            modelBuilder.Entity("EVS.Core.Models.Ride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("datetime2")
                        .HasColumnName("departure");

                    b.Property<int>("Distance")
                        .HasColumnType("int")
                        .HasColumnName("distance");

                    b.Property<string>("EndCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("end_city");

                    b.Property<double>("EndLatitude")
                        .HasColumnType("float")
                        .HasColumnName("end_latitude");

                    b.Property<double>("EndLongitude")
                        .HasColumnType("float")
                        .HasColumnName("end_longitude");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("Seats")
                        .HasColumnType("int")
                        .HasColumnName("seats");

                    b.Property<string>("StartCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("start_city");

                    b.Property<double>("StartLatitude")
                        .HasColumnType("float")
                        .HasColumnName("start_latitude");

                    b.Property<double>("StartLongitude")
                        .HasColumnType("float")
                        .HasColumnName("start_longitude");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ride");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d95ee668-9841-4875-8f66-b2489ba6557b"),
                            Departure = new DateTime(2024, 3, 17, 7, 0, 0, 0, DateTimeKind.Local),
                            Distance = 204,
                            EndCity = "Paris",
                            EndLatitude = 48.858825500000002,
                            EndLongitude = 2.2646343999999998,
                            Price = 20.0,
                            Seats = 3,
                            StartCity = "Lille",
                            StartLatitude = 50.631073299999997,
                            StartLongitude = 3.0056983000000002,
                            UserId = new Guid("9ce2d194-ea60-4af0-a7dc-4498d6b049ef")
                        },
                        new
                        {
                            Id = new Guid("8d4a638d-13b6-4cc3-ab3c-58af25cd208f"),
                            Departure = new DateTime(2024, 3, 18, 11, 0, 0, 0, DateTimeKind.Local),
                            Distance = 204,
                            EndCity = "Paris",
                            EndLatitude = 48.858825500000002,
                            EndLongitude = 2.2646343999999998,
                            Price = 18.0,
                            Seats = 2,
                            StartCity = "Lille",
                            StartLatitude = 50.631073299999997,
                            StartLongitude = 3.0056983000000002,
                            UserId = new Guid("588adbff-9da6-4230-8eaf-ffea4582a67e")
                        },
                        new
                        {
                            Id = new Guid("be408512-a07c-4c8e-818e-78b2e6ae4da4"),
                            Departure = new DateTime(2024, 3, 22, 17, 0, 0, 0, DateTimeKind.Local),
                            Distance = 204,
                            EndCity = "Lille",
                            EndLatitude = 50.631073299999997,
                            EndLongitude = 3.0056983000000002,
                            Price = 23.0,
                            Seats = 4,
                            StartCity = "Paris",
                            StartLatitude = 48.858825500000002,
                            StartLongitude = 2.2646343999999998,
                            UserId = new Guid("80bcd0ab-ed65-4e39-8c51-b5a16b0cda77")
                        },
                        new
                        {
                            Id = new Guid("78602c13-f524-4a98-8f29-1dcf7c112796"),
                            Departure = new DateTime(2024, 3, 29, 5, 0, 0, 0, DateTimeKind.Local),
                            Distance = 660,
                            EndCity = "Marseille",
                            EndLatitude = 43.280226999999996,
                            EndLongitude = 5.2158397000000001,
                            Price = 39.0,
                            Seats = 1,
                            StartCity = "Paris",
                            StartLatitude = 48.858825500000002,
                            StartLongitude = 2.2646343999999998,
                            UserId = new Guid("c9469a26-87f5-4019-9d8f-9fa7de4e8050")
                        },
                        new
                        {
                            Id = new Guid("b2d8e9b1-2e72-40ee-9d07-a1478b743dc0"),
                            Departure = new DateTime(2024, 3, 21, 4, 0, 0, 0, DateTimeKind.Local),
                            Distance = 435,
                            EndCity = "Bordeaux",
                            EndLatitude = 44.841225000000001,
                            EndLongitude = -0.580036,
                            Price = 46.0,
                            Seats = 3,
                            StartCity = "Lyon",
                            StartLatitude = 45.757814000000003,
                            StartLongitude = 4.8320109999999996,
                            UserId = new Guid("c9469a26-87f5-4019-9d8f-9fa7de4e8050")
                        },
                        new
                        {
                            Id = new Guid("716016f8-a49d-483e-a219-1c530091ecf8"),
                            Departure = new DateTime(2024, 3, 8, 8, 0, 0, 0, DateTimeKind.Local),
                            Distance = 699,
                            EndCity = "Lille",
                            EndLatitude = 50.631073299999997,
                            EndLongitude = 50.631073299999997,
                            Price = 52.0,
                            Seats = 2,
                            StartCity = "Bordeaux",
                            StartLatitude = 44.841225000000001,
                            StartLongitude = -0.580036,
                            UserId = new Guid("c9469a26-87f5-4019-9d8f-9fa7de4e8050")
                        });
                });

            modelBuilder.Entity("EVS.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("AcceptFood")
                        .HasColumnType("bit")
                        .HasColumnName("accept_food");

                    b.Property<bool>("AcceptMusic")
                        .HasColumnType("bit")
                        .HasColumnName("accept_music");

                    b.Property<bool>("AcceptPet")
                        .HasColumnType("bit")
                        .HasColumnName("accept_pet");

                    b.Property<bool>("AcceptSmallTalk")
                        .HasColumnType("bit")
                        .HasColumnName("accept_talk");

                    b.Property<bool>("AcceptSmoker")
                        .HasColumnType("bit")
                        .HasColumnName("accept_smoker");

                    b.Property<DateTime?>("Birthday")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("birthday");

                    b.Property<string>("CarDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("car_description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstname");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("is_admin");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("photo");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("pseudo");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Pseudo")
                        .IsUnique();

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e199bcf-cd69-4f29-8dff-9222388e9988"),
                            AcceptFood = false,
                            AcceptMusic = false,
                            AcceptPet = false,
                            AcceptSmallTalk = false,
                            AcceptSmoker = false,
                            Birthday = new DateTime(2024, 3, 12, 11, 18, 54, 980, DateTimeKind.Local).AddTicks(9306),
                            CarDescription = "",
                            Email = "admin@envoituresimone.com",
                            FirstName = "Admin",
                            IsAdmin = true,
                            LastName = "Admin",
                            Password = "admin",
                            PhoneNumber = "0102030405",
                            Photo = "https://this-person-does-not-exist.com/img/avatar-gen485cbb48758f0bbe06ed361e18f34d9c.jpg",
                            Pseudo = "admin"
                        },
                        new
                        {
                            Id = new Guid("9ce2d194-ea60-4af0-a7dc-4498d6b049ef"),
                            AcceptFood = true,
                            AcceptMusic = true,
                            AcceptPet = false,
                            AcceptSmallTalk = false,
                            AcceptSmoker = false,
                            Birthday = new DateTime(1998, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "Daewoo",
                            Email = "naldren0@webeden.co.uk",
                            FirstName = "Amye",
                            IsAdmin = false,
                            LastName = "Colchett",
                            Password = "aB0.oB?iBy\\",
                            PhoneNumber = "0337862430",
                            Photo = "https://this-person-does-not-exist.com/img/avatar-gen1175da31458c1a38f5c53205c1d40c49.jpg",
                            Pseudo = "acolchett0"
                        },
                        new
                        {
                            Id = new Guid("80bcd0ab-ed65-4e39-8c51-b5a16b0cda77"),
                            AcceptFood = false,
                            AcceptMusic = true,
                            AcceptPet = false,
                            AcceptSmallTalk = true,
                            AcceptSmoker = true,
                            Birthday = new DateTime(1974, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "Lexus",
                            Email = "ddroogan1@thetimes.co.uk",
                            FirstName = "Nap",
                            IsAdmin = false,
                            LastName = "Droogan",
                            Password = "tH0)I/Mt<xZwz2",
                            PhoneNumber = "0322458382",
                            Photo = "https://this-person-does-not-exist.com/img/avatar-genc4f3be92e510666c0f16aeee2435ed90.jpg",
                            Pseudo = "ddroogan1"
                        },
                        new
                        {
                            Id = new Guid("588adbff-9da6-4230-8eaf-ffea4582a67e"),
                            AcceptFood = false,
                            AcceptMusic = true,
                            AcceptPet = true,
                            AcceptSmallTalk = false,
                            AcceptSmoker = false,
                            Birthday = new DateTime(1988, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "Jeep",
                            Email = "kpedwell2@icq.com",
                            FirstName = "Kordula",
                            IsAdmin = false,
                            LastName = "Pedwell",
                            Password = "pH3+&{WpvdT",
                            PhoneNumber = "0903434966",
                            Photo = "https://this-person-does-not-exist.com/img/avatar-gen7b7dfa2a253e45ffa4925acc349ffcdc.jpg",
                            Pseudo = "kpedwell2"
                        },
                        new
                        {
                            Id = new Guid("bc98b4a9-afa0-49c1-9fc6-8457af77758a"),
                            AcceptFood = true,
                            AcceptMusic = true,
                            AcceptPet = false,
                            AcceptSmallTalk = false,
                            AcceptSmoker = false,
                            Birthday = new DateTime(1984, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "Austin",
                            Email = "lhair3@wikipedia.org",
                            FirstName = "Lindsey",
                            IsAdmin = false,
                            LastName = "Hair",
                            Password = "eE0'6STA~9O#Suj{",
                            PhoneNumber = "0162842195",
                            Photo = "https://this-person-does-not-exist.com/img/avatar-gen1131946bc643d6ef1643496115dade90.jpg",
                            Pseudo = "lhair3"
                        },
                        new
                        {
                            Id = new Guid("c9469a26-87f5-4019-9d8f-9fa7de4e8050"),
                            AcceptFood = true,
                            AcceptMusic = false,
                            AcceptPet = false,
                            AcceptSmallTalk = false,
                            AcceptSmoker = false,
                            Birthday = new DateTime(1997, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "BMW",
                            Email = "cgrigorkin4@theatlantic.com",
                            FirstName = "Carlota",
                            IsAdmin = false,
                            LastName = "Grigorkin",
                            Password = "tZ9\\4s(DQvnvE",
                            PhoneNumber = "0494223557",
                            Photo = "https://this-person-does-not-exist.com/img/avatar-gen376a50c7287a78e549d58d13a864d15f.jpg",
                            Pseudo = "cgrigorkin4"
                        });
                });

            modelBuilder.Entity("EVS.Core.Models.Feedback", b =>
                {
                    b.HasOne("EVS.Core.Models.Ride", "Ride")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVS.Core.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ride");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVS.Core.Models.Reservation", b =>
                {
                    b.HasOne("EVS.Core.Models.Ride", "Ride")
                        .WithMany("Reservations")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVS.Core.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ride");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVS.Core.Models.Ride", b =>
                {
                    b.HasOne("EVS.Core.Models.User", "User")
                        .WithMany("Rides")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVS.Core.Models.Ride", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("EVS.Core.Models.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Reservations");

                    b.Navigation("Rides");
                });
#pragma warning restore 612, 618
        }
    }
}
