// <auto-generated />
using System;
using EVS.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EVS.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240311133806_RideCitiesRemoveCountry")]
    partial class RideCitiesRemoveCountry
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EVS.Core.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("comments");

                    b.Property<int>("Note")
                        .HasColumnType("int")
                        .HasColumnName("note");

                    b.Property<Guid>("RideId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ride_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("feedback");

                    b.HasData(
                        new
                        {
                            Id = new Guid("992fb456-ac93-49cf-84de-cd7f58d9a1af"),
                            Comments = "J'ai pris un EVS à cause de la grève sncf. Au bout de dix minutes de discussion, il y a un passager qui dit \"Eh ca vous dis pas un covoiturage où tout le monde ferme sa gueule ?\"\r\nGrand silence depuis, plus personne ose parler.",
                            Note = 4,
                            RideId = new Guid("33d38d13-1585-4ec9-a386-abfb7a72eb0d"),
                            UserId = new Guid("b4057738-115f-4f5b-be4a-fac4b4bc2973")
                        },
                        new
                        {
                            Id = new Guid("2a9669e7-7177-4462-8f0f-4b63b6bcdbed"),
                            Comments = "En Voiture Simone qui m'envoie une notif pour me dire que je suis éligible à la prime de l'Etat de 100€ pour encourager le convoiturage mdrrr ok il me manque juste le permis mais sinon ok je suis éligible 😭",
                            Note = 5,
                            RideId = new Guid("33d38d13-1585-4ec9-a386-abfb7a72eb0d"),
                            UserId = new Guid("13f06521-e031-44ef-9706-7010a42632e3")
                        },
                        new
                        {
                            Id = new Guid("c8c4959e-e9c8-414e-a42a-3350abfa4027"),
                            Comments = "suis dans mon EVS il a fermé les fenetres j’ose pas dire que j’ai des cheveux coincés dedans je peux pas bouger omg",
                            Note = 3,
                            RideId = new Guid("33d38d13-1585-4ec9-a386-abfb7a72eb0d"),
                            UserId = new Guid("2a9863cf-594e-457d-b66b-d8aca5910f03")
                        });
                });

            modelBuilder.Entity("EVS.Core.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("reservation_date");

                    b.Property<Guid>("RideId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ride_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("reservation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16e642de-0662-414f-974f-84df85bd713d"),
                            ReservationDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            RideId = new Guid("06fd92f4-0780-4546-9f2b-7d10dadd3cf1"),
                            Status = 1,
                            UserId = new Guid("2a9863cf-594e-457d-b66b-d8aca5910f03")
                        },
                        new
                        {
                            Id = new Guid("62238bf6-fdd7-4a01-91b0-a7edd35d2b4a"),
                            ReservationDate = new DateTime(2024, 3, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            RideId = new Guid("13eeeb6b-c8cf-4e6e-9787-7bfb201277d9"),
                            Status = 2,
                            UserId = new Guid("1b91145c-99ce-4fc3-93f8-96101ad9051c")
                        },
                        new
                        {
                            Id = new Guid("ac0f6065-0ff4-4884-b7a2-44d00ea4d42d"),
                            ReservationDate = new DateTime(2024, 3, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            RideId = new Guid("06fd92f4-0780-4546-9f2b-7d10dadd3cf1"),
                            Status = 1,
                            UserId = new Guid("df5c8c86-1208-4c11-837b-096e5714028f")
                        });
                });

            modelBuilder.Entity("EVS.Core.Models.Ride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("datetime2")
                        .HasColumnName("departure");

                    b.Property<int>("Distance")
                        .HasColumnType("int")
                        .HasColumnName("distance");

                    b.Property<string>("EndCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("end_city");

                    b.Property<double>("EndLatitude")
                        .HasColumnType("float")
                        .HasColumnName("end_latitude");

                    b.Property<double>("EndLongitude")
                        .HasColumnType("float")
                        .HasColumnName("end_longitude");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("Seats")
                        .HasColumnType("int")
                        .HasColumnName("seats");

                    b.Property<string>("StartCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("start_city");

                    b.Property<double>("StartLatitude")
                        .HasColumnType("float")
                        .HasColumnName("start_latitude");

                    b.Property<double>("StartLongitude")
                        .HasColumnType("float")
                        .HasColumnName("start_longitude");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ride");

                    b.HasData(
                        new
                        {
                            Id = new Guid("776df38f-38ea-409c-ac94-34748893411d"),
                            Departure = new DateTime(2024, 3, 16, 0, 0, 0, 0, DateTimeKind.Local),
                            Distance = 204,
                            EndCity = "Paris",
                            EndLatitude = 48.858825500000002,
                            EndLongitude = 2.2646343999999998,
                            Price = 20.0,
                            Seats = 3,
                            StartCity = "Lille",
                            StartLatitude = 50.631073299999997,
                            StartLongitude = 3.0056983000000002,
                            UserId = new Guid("b4057738-115f-4f5b-be4a-fac4b4bc2973")
                        },
                        new
                        {
                            Id = new Guid("06fd92f4-0780-4546-9f2b-7d10dadd3cf1"),
                            Departure = new DateTime(2024, 3, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            Distance = 204,
                            EndCity = "Paris",
                            EndLatitude = 48.858825500000002,
                            EndLongitude = 2.2646343999999998,
                            Price = 18.0,
                            Seats = 2,
                            StartCity = "Lille",
                            StartLatitude = 50.631073299999997,
                            StartLongitude = 3.0056983000000002,
                            UserId = new Guid("df5c8c86-1208-4c11-837b-096e5714028f")
                        },
                        new
                        {
                            Id = new Guid("13eeeb6b-c8cf-4e6e-9787-7bfb201277d9"),
                            Departure = new DateTime(2024, 3, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            Distance = 204,
                            EndCity = "Lille",
                            EndLatitude = 50.631073299999997,
                            EndLongitude = 3.0056983000000002,
                            Price = 23.0,
                            Seats = 4,
                            StartCity = "Paris",
                            StartLatitude = 48.858825500000002,
                            StartLongitude = 2.2646343999999998,
                            UserId = new Guid("13f06521-e031-44ef-9706-7010a42632e3")
                        },
                        new
                        {
                            Id = new Guid("4ae3ccf2-b310-412a-be25-5cd9d3f343af"),
                            Departure = new DateTime(2024, 3, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            Distance = 660,
                            EndCity = "Marseille",
                            EndLatitude = 43.280226999999996,
                            EndLongitude = 5.2158397000000001,
                            Price = 39.0,
                            Seats = 1,
                            StartCity = "Paris",
                            StartLatitude = 48.858825500000002,
                            StartLongitude = 2.2646343999999998,
                            UserId = new Guid("1b91145c-99ce-4fc3-93f8-96101ad9051c")
                        },
                        new
                        {
                            Id = new Guid("47082532-3371-45c8-a370-f8207e2deb05"),
                            Departure = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            Distance = 435,
                            EndCity = "Bordeaux",
                            EndLatitude = 44.841225000000001,
                            EndLongitude = -0.580036,
                            Price = 46.0,
                            Seats = 3,
                            StartCity = "Lyon",
                            StartLatitude = 45.757814000000003,
                            StartLongitude = 4.8320109999999996,
                            UserId = new Guid("1b91145c-99ce-4fc3-93f8-96101ad9051c")
                        },
                        new
                        {
                            Id = new Guid("33d38d13-1585-4ec9-a386-abfb7a72eb0d"),
                            Departure = new DateTime(2024, 3, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            Distance = 699,
                            EndCity = "Lille",
                            EndLatitude = 50.631073299999997,
                            EndLongitude = 50.631073299999997,
                            Price = 52.0,
                            Seats = 2,
                            StartCity = "Bordeaux",
                            StartLatitude = 44.841225000000001,
                            StartLongitude = -0.580036,
                            UserId = new Guid("1b91145c-99ce-4fc3-93f8-96101ad9051c")
                        });
                });

            modelBuilder.Entity("EVS.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Birthday")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("birthday");

                    b.Property<string>("CarDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("car_description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("photo");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("pseudo");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Pseudo")
                        .IsUnique();

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b723946a-cac5-4057-8599-84456b7810bd"),
                            Birthday = new DateTime(2024, 3, 11, 14, 38, 5, 318, DateTimeKind.Local).AddTicks(2558),
                            CarDescription = "",
                            Email = "admin@envoituresimone.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Password = "admin",
                            PhoneNumber = "0102030405",
                            Photo = "https://thispersondoesnotexist.com/",
                            Pseudo = "admin"
                        },
                        new
                        {
                            Id = new Guid("b4057738-115f-4f5b-be4a-fac4b4bc2973"),
                            Birthday = new DateTime(1998, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "Daewoo",
                            Email = "naldren0@webeden.co.uk",
                            FirstName = "Amye",
                            LastName = "Colchett",
                            Password = "aB0.oB?iBy\\",
                            PhoneNumber = "0337862430",
                            Photo = "https://thispersondoesnotexist.com/",
                            Pseudo = "acolchett0"
                        },
                        new
                        {
                            Id = new Guid("13f06521-e031-44ef-9706-7010a42632e3"),
                            Birthday = new DateTime(1974, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "Lexus",
                            Email = "ddroogan1@thetimes.co.uk",
                            FirstName = "Nap",
                            LastName = "Droogan",
                            Password = "tH0)I/Mt<xZwz2",
                            PhoneNumber = "0322458382",
                            Photo = "https://thispersondoesnotexist.com/",
                            Pseudo = "ddroogan1"
                        },
                        new
                        {
                            Id = new Guid("df5c8c86-1208-4c11-837b-096e5714028f"),
                            Birthday = new DateTime(1988, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "Jeep",
                            Email = "kpedwell2@icq.com",
                            FirstName = "Kordula",
                            LastName = "Pedwell",
                            Password = "pH3+&{WpvdT",
                            PhoneNumber = "0903434966",
                            Photo = "https://thispersondoesnotexist.com/",
                            Pseudo = "kpedwell2"
                        },
                        new
                        {
                            Id = new Guid("2a9863cf-594e-457d-b66b-d8aca5910f03"),
                            Birthday = new DateTime(1984, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "Austin",
                            Email = "lhair3@wikipedia.org",
                            FirstName = "Lindsey",
                            LastName = "Hair",
                            Password = "eE0'6STA~9O#Suj{",
                            PhoneNumber = "0162842195",
                            Photo = "https://thispersondoesnotexist.com/",
                            Pseudo = "lhair3"
                        },
                        new
                        {
                            Id = new Guid("1b91145c-99ce-4fc3-93f8-96101ad9051c"),
                            Birthday = new DateTime(1997, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarDescription = "BMW",
                            Email = "cgrigorkin4@theatlantic.com",
                            FirstName = "Carlota",
                            LastName = "Grigorkin",
                            Password = "tZ9\\4s(DQvnvE",
                            PhoneNumber = "0494223557",
                            Photo = "https://thispersondoesnotexist.com/",
                            Pseudo = "cgrigorkin4"
                        });
                });

            modelBuilder.Entity("EVS.Core.Models.Feedback", b =>
                {
                    b.HasOne("EVS.Core.Models.Ride", "Ride")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVS.Core.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ride");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVS.Core.Models.Reservation", b =>
                {
                    b.HasOne("EVS.Core.Models.Ride", "Ride")
                        .WithMany("Reservations")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVS.Core.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ride");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVS.Core.Models.Ride", b =>
                {
                    b.HasOne("EVS.Core.Models.User", "User")
                        .WithMany("Rides")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVS.Core.Models.Ride", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("EVS.Core.Models.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Reservations");

                    b.Navigation("Rides");
                });
#pragma warning restore 612, 618
        }
    }
}
